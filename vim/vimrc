" Settings {{{
syntax on

" Stick unamed register into system clipboard
set clipboard+=unnamed

" Correct delete key in OSX
set backspace=eol,start,indent

set ai " Auto indent
set si " Smart indent
set wrap " Wrap lines
set smarttab
set number
set ffs=unix,dos,unix
set background=dark

" Use vim, not vi api
set nocompatible

" Get rid of the delay when pressing O (for example)
" http://stackoverflow.com/questions/2158516/vim-delay-before-o-opens-a-new-line
set timeout timeoutlen=1000 ttimeoutlen=100

" Always show status bar
set laststatus=2

" Set the status line to something useful
set statusline=%f\ %=L:%l/%L\ %c\ (%p%%)

" Hide the toolbar
set guioptions-=T

" No backup files
" set nobackup

" No write backup
" set nowritebackup

" No swap file
" set noswapfile

" Set leader key
let mapleader = ','

" Always show cursor
set ruler

" Make sure any searches /searchPhrase doesn't need the \c escape character 
set ignorecase

" Ignore case in search
set smartcase

" Autoload files that have changed outside of vim
set autoread

" Highlight tailing whitespace
set list listchars=tab:\ \ ,trail:¬∑

" Mod line supporting
set modeline
set modelines=5

" Set folding type in marker
set foldmethod=marker

" Set search results highlighting
set hlsearch

" }}}

" Plugins {{{
execute pathogen#infect()
filetype plugin indent on " Required by Pathogen Plugin Manager

call plug#begin('~/.vim/plugged')

" Make sure you use single quotes
Plug 'junegunn/seoul256.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-github-dashboard'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'lervag/vimtex'
Plug 'moll/vim-node'
Plug 'digitaltoad/vim-jade'
Plug 'wakatime/vim-wakatime'
Plug '1995parham/vim-zimpl'
Plug '1995parham/vim-gas'
Plug '1995parham/vim-tcpdump'
Plug '1995parham/tomorrow-night-vim'
Plug '1995parham/vim-spice'
Plug 'aolab/vim-avro'
Plug 'xuhdev/SingleCompile'
Plug 'klen/python-mode'
Plug 'scrooloose/syntastic'
Plug 'jelera/vim-javascript-syntax'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'airblade/vim-gitgutter'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'dag/vim2hs'
Plug 'fatih/vim-go'
Plug 'majutsushi/tagbar'
Plug 'bps/vim-tshark'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'MattesGroeger/vim-bookmarks'
Plug 'othree/html5.vim'
Plug 'docker/docker'
Plug 'ap/vim-css-color'
Plug 'mattn/webapi-vim'
Plug 'tmux-plugins/vim-tmux'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Plugin options
Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
Plug '1995parham/vim-header', { 'do': '~/.vim/plugged/vim-header/init.sh' }
Plug 'junegunn/fzf', { 'do': 'yes \| ./install' }

" Add plugins to &runtimepath
call plug#end()

" Theme
set background=light
colorscheme Tomorrow-Night

" Airline (status line)
let g:airline_powerline_fonts = 1

" Git gutter
let g:gitgutter_enabled = 1
let g:gitgutter_eager = 0
let g:gitgutter_sign_column_always = 1
highlight clear SignColumn

" Super tab
let g:SuperTabMappingForward = "<C-h>"

" Pymode
if has('python') || has('python3')
	let g:pymode = 1
	let g:pymode_trim_whitespaces = 1
	let g:pymode_options = 1
	let g:pymode_folding = 0
	let g:pymode_lint = 1
	let g:pymode_lint_message = 1
	let g:pymode_lint_on_write = 1
	let g:pymode_lint_unmodified = 1
else
	let g:pymode = 0
endif

if has('python3')
	let g:pymode_python = 'python3'
elseif has('python')
	let g:pymode_python = 'python'
endif

" Header
let g:header_user = 'Parham Alvani'
let g:header_email = 'parham.alvani@gmail.com'

" Syntastic
if has('python3')
	let g:syntastic_python_python_exec = system('which python3')
elseif has('python')
	let g:syntastic_python_python_exec = system('which python')
endif
let g:syntastic_python_checkers = ['pylint']

" vim-go
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)

" vim-markdown
let g:vim_markdown_math = 1

" Tagbar
nmap <F8> :TagbarToggle<CR>
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = '|'
let g:airline#extensions#syntastic#enabled = 1


let g:airline_left_sep = ''
let g:airline_left_sep = '|'
let g:airline_right_sep = '|'
let g:airline_right_sep = '|'

if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.readonly = 'üîí'
let g:airline_symbols.linenr = '‚êä'
let g:airline_symbols.linenr = '‚ê§'
let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.branch = '‚éá'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.paste = '√û'
let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.whitespace = 'Œû'

" C
let c_gnu = 1

" Octave
augroup filetypedetect
	au! BufRead,BufNewFile *.m,*.oct set filetype=octave
augroup END

" Use keywords from Octave syntax language file for autocomplete
if has("autocmd") && exists("+omnifunc")
	autocmd Filetype octave
				\	if &omnifunc == "" |
				\	setlocal omnifunc=syntaxcomplete#Complete |
				\	endif
endif

"}}}

" Commands {{{

" Command Mappings
command Spellcheck setlocal spell spelllang=en_us

" File formats
autocmd Filetype gitcommit setlocal spell textwidth=72

" }}}

