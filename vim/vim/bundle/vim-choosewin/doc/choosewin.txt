*choowsewin.txt* land to window you choose like tmux's 'display-pane'.

Version: 1.3
Author : t9md <taqumd@gmail.com>
GitHub : https://github.com/t9md/vim-choowsewin
==============================================================================
CONTENTS					*choowsewin-contents*

Introduction				    |choowsewin-introduction|
Mapping					    |choowsewin-mapping|
Commands				    |choowsewin-commands|
Variables				    |choowsewin-variables|
Functions				    |choowsewin-functions|
Configuration Example			    |choowsewin-example|
Bug					    |choowsewin-bug|
Todo					    |choowsewin-todo|
Changelog				    |choowsewin-changelog|

==============================================================================
INTRODUCTION					*choowsewin-introduction*

Land to window you choose~

Aiming to mimic tmux's `display-pane` feature, which enables you to choose
window interactively.

This plugin should be useful especially when you are working on high
resolution wide display.
Since with wide display, you are likely to open multiple window and
moving around window is a little bit tiresome.


This plugin simplifies window excursion.

	1. Display window label on statusbar.
	2. Read input from user.
	3. You can land window you choose.

==============================================================================
MAPPINGS					*choowsewin-mappings*

<Plug>(choosewin)

==============================================================================
COMMANDS						*choowsewin-commands*

*:ChooseWin*

==============================================================================
VARIABLES						*choowsewin-variables*

*g:choosewin_statusline_replace*
	Default: 1
	Type: Number

*g:choosewin_color_label*
	Default: See plugin/choosewin.vim
	Type: |Dictionary|

	Set color with collowing fomrat.
	{
	  'gui': [ {guibg}, {guifg}, {gui} ],
	  'cterm': [ {ctermbg}, {ctermfg}, {cterm}]
	}

	You can omit unused color, means if you use vim only GUI, you don't
	need to configure 'cterm' field.
	And if you want set {guifg} but not {guibg}, use empty string('') like
>
	let g:choosewin_color_label = { 'gui': ['', 'white'] }
<

	Exeample~
>
	let g:choosewin_color_label = {
	      \ 'gui': ['ForestGreen', 'white', 'bold'],
	      \ 'cterm': [ 9, 16]
	      \ }
	let g:choosewin_color_other = {
	      \ 'gui': ['gray20', 'black'],
	      \ 'cterm': [ 240, 0]
	      \ }
<

*g:choosewin_color_overlay*
	color of overlay window caption
*g:choosewin_color_overlay_current*
	color of overlay window caption for current window
*g:choosewin_color_shade*
	color of shade
*g:choosewin_color_label_current*
	color of label for current win/tab
*g:choosewin_color_other*
	color of around-label win/tab
*g:choosewin_color_land*
	Used to blink cursor word when landing to window.

*g:choosewin_blink_on_land*
	Default: 1
	Type: |Number| 0 or 1
	Control whether blinking cursor word when landing window.
	Set 0 to disable blinking.

*g:choosewin_label*
	Default: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	Type: |String|

	[CAUTION] You need to manage to avoid conflict to
	|g:choosewin_tablabel| or you can't choose label you want.

	[NOTE] choosewin ignore case you input so that you don't need to
	press Shift. This is for show label with upper case to standout and
	choose label with minimal key stroke.

	Example~
>
	let g:choosewin_label = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
<
*g:choosewin_tablabel*
	Default: '123456789'
	Type: |String|
	[CAUNTION] You need to manage to avoid conflict to
	|g:choosewin_label| or you can't choose label you want.

*g:choosewin_keymap*
	Default: {}
	Type: |Dictionary|

	Used to customize keymap while choosing.
	Default keymap is below.

	| Key  | Action     | Description                |
	| ---- | ---------- | -------------------------- |
	| 0    | tab_first  | choose FIRST    tab        |
	| [    | tab_prev   | choose PREVIOUS tab        |
	| ]    | tab_next   | choose NEXT     tab        |
	| $    | tab_last   | choose LAST     tab        |
	| ;    | win_land   | land to current window     |
	| <CR> | win_land   | land to current window     |
	|      | <NOP>      | disable predefined keymap  |

	Disabling default keymap~

	To disable default keymap, you can use special action '<NOP>'.
	The key set to '<NOP>' will be deleted(unmapped) from keytable.

	Customization example~
>
	let g:choosewin_keymap   = {}         " initialize as Dictionary
	let g:choosewin_keymap.m = 'win_land' " land with 'm'
	let g:choosewin_keymap.0 = '<NOP>'    " disable default 0 keybind
<

*g:choosewin_label_align*
	Default: 'center'
	One of 'right', 'center', 'left'

*g:choosewin_label_padding*
	Default: 3
	Type: |Number|
	Control padding concatenated around window label.

*g:choosewin_label_fill*
	Default: 0
	Type: |Number|
	Set 1 to fill statusline

*g:choosewin_return_on_single_win*
	Default: 0
	Type: |Number|
	Set 1 to return immediately when number of window is 1.

*g:choosewin_overlay_enable*
	Default: 0
	Type: |Number|
	Enable overlay window caption.

	Limitation~
	Not work properly in following situation.
		- buffer includes multibyte characters
		  You can use |g:choosewin_overlay_clear_multibyte| as
		  workaround.

	How It works~
	Purpose of this section is make you understand trade-off of overlay.
		Good:	Easy to spot window label than it on |&statusline|.
		Bad:	Too aggressive for merely show caption and slow.

	What 'too agressive' means,
		- change buffer temporarily
			1. Substitute tab to space
			2. Append space to rendering area
			3. Append empty line to EOF.
		- Then highlight caption font with matchadd()
		- when reverting undo all changes.

*g:choosewin_overlay_font_size*
	Default: 'auto'
	Type: |String|
	Value: must be 'auto', 'small', 'large'
	Specify overlay font size.
	'auto' determine appropriate font size based on window height.

*g:choosewin_overlay_shade*
	Default: 0
	Type: |Number|
	Enable shade where overlay window caption is rendered.

*g:choosewin_overlay_clear_multibyte*
	Default: 0
	Type: |Number|
	When caption rendering area include multiple chars, clear out caption
	rendering area first before overlay.
	Useful when buffer contains multibyte character, which break window
	caption font because 1 char is not necessarily 1 byte.

*g:choosewin_overlay_shade_priority*
	Default: 100
	Type: |Number|
	Highlight priority value, this value passed to matchadd() at overlay.

*g:choosewin_overlay_label_priority*
	Default: 101
	Type: |Number|
	Highlight priority value, this value passed to matchadd() at overlay.

*g:choosewin_hook_enable*
	Default: 0
	Type: |Number|
	Value: 0 or 1

	Need to set 1 if you want to use hook.

*g:choosewin_hook_bypass*
	Default: []
	Type: |List|
	Value: |List| of {hook_point}

	See |choosewin-hook_point| for {hook_point}

*g:choosewin_hook*
	Default: {}
	Type: |Dictionary|
	Values: { '{hookpoint}': {funcref}, ... }

	Used to hook at specific point.

							*choosewin-hook_point*
Available Hook Point~

- filter_window~
	Args: {winnums}
	Type: |List|
	Return: {winnums}

	{winnums}:
		|List| of window number which is subject to chose by user.

	[Example]: show label for specific window  >

	let s:ignore_filtype = ["unite", "vimfiler", "vimshell", "nerdtree" ]

	let g:choosewin_hook = {}
	function! g:choosewin_hook.filter_window(winnums)
	  return filter(a:winnums,
		\ 'index(s:ignore_filtype,
		\   getwinvar(v:val, "&filetype")) == -1' )
	endfunction

==============================================================================
FUNCTIONS						*choowsewin-functions*

							   *choosewin#start()*
choosewin#start({winnum-list}, [ {config} ] )
	Return: |List|
	Value:
		choosed:  [ tabpagenr(), winnr() ]
		canceled: []

	{winnum-list}:  Required
		|List| of window number.

	{config}: Optional
		Type: |Dictionary|

		Pass configuration option with { "key": value } format.
		The config you passed is merged to default_config,
		See |choosewin#config()|.

	Api-only parameters~
	Following config parameter is not provided as global
	configuration variable. So need to mention here.

	auto_choose:
		Type: |Number|
		Value: 0 or 1
		Set 1 to automatically choose window when candidate window is
		only one.

	noop:
		Type: |Number|
		Value: 0 or 1
		Set 1 don't execute window change, but return last status of
		user's choice.

	[Example]: show label for specific window  >
	" win3 => d, win4 => e, char 'f' is silently ignored.
	call choosewin#start([3,4], { 'label': 'def' })
<
	[Example]: automatically choose if candidate window is one. >
	function! s:is_ignore_window(winnr)
	  let ignore_filtype = ["unite", "vimfiler", "vimshell", "nerdtree" ]
	  return index(ignore_filtype, getbufvar(winbufnr(a:winnr), "&filetype")) != -1
	endfunction

	let wins = range(1,winnr('$'))
	call choosewin#start(
	      \ filter(wins, '!s:is_ignore_window(v:val)'),
	      \ { 'auto_choose': 1, 'hook_enable': 0 }
	      \ )
<
	[Example]: noop usage
	let choice = choosewin#start(winnums, { 'noop': 1, 'auto_choose': 1 })
	if !empty(choice)
	  let [tab, win] = choice
	  execute 'tabnext' tab
	  execute win 'wincmd w'
	endif

						  *choosewin#config()*
choosewin#config()
	Return: |Dictionary|
	You can check initial configuration set used by choosewin.
	Initial means configuration at each choosewin start, 'not default',
	its respect your customization through global variable.

==============================================================================
CONFIGURATION EXAMPLE				    *choowsewin-example*
>
	" invoke with '-'
	nmap  -  <Plug>(choosewin)

	" use overlay feature
	let g:choosewin_overlay_enable = 1

	" workaround for overlay font broken on mutibyte buffer.
	let g:choosewin_overlay_clear_multibyte = 1

	" tmux like overlay color
	let g:choosewin_color_overlay = {
	      \ 'gui': ['DodgerBlue3', 'DodgerBlue3' ],
	      \ 'cterm': [ 25, 25 ]
	      \ }
	let g:choosewin_color_overlay_current = {
	      \ 'gui': ['firebrick1', 'firebrick1' ],
	      \ 'cterm': [ 124, 124 ]
	      \ }

	let g:choosewin_blink_on_land      = 0 " dont' blink at land
	let g:choosewin_statusline_replace = 0 " don't replace statusline
	let g:choosewin_tabline_replace    = 0 " don't replace tabline
<
==============================================================================
BUG							    *choowsewin-bug*


==============================================================================
TODO							    *choowsewin-todo*

[x] recover poslist properly in overlay mode
[x] disable &lcs-trail adviced by manga-osyo
[x] FIX API-specification
[ ] Distinguish original tab so that user never lost while traveling tab.

==============================================================================
CHANGELOG						*choowsewin-changelog*

2014-01-15:
	- [new] add 'noop' option for api-only call
	- [new] add hook feature for filter_window before label_show()
	- [new] g:choosewin_active auto set variable intended within
	  &statuline plugin(such as disabling trailing space warning).
2014-01-12:
	- [improve] disble cursorline while overlay
	- [new-feature] now support 'small' font for overlay and configurable
	  size you prefer. by default 'auto' mode determine font size based on
	  winheight(0).
2014-01-11: v1.3
	- [verup] v1.3
	- [improve] provide '<NOP>" special action to disable default keymap.
	- [improve] greatly improve overlay rendering with new pattern
	  compilation x2 faster now.
2014-01-10:
	- [improve] disable trailing white space highlight internally.
	- [improve] performance and effectiveness improve by avoiding
	  unnecessary append blankline.
	- [improve] treat first_path() case as consistent manner.
	- [improve] eliminate invalid window at initial phrase
2014-01-09: v1.2
	- verup
2014-01-09: v1.1
	- [improve] now undo history cleared when undolist is empty.
	- [improve] recover poslist properly in overlay mode
	- [bugfix] for buffer buftype=nowrite,nofile, buffer was not recovered
	  since &modified flag is ignored.
2014-01-08: v1.0
	- [improve] Add multibyte workaround.
	- [improve] now overlay not break since &conceallevel = 0 temporarily
	- [bugfix] validate valid winnum and number of label
	- [improve] disable fold, wrap, list adviced by manga-osyo.
	- [improve] separate keymap variable
	- [bugfix] properly clear label on tabswitch
	- [refactor] and stabilize
2014-01-06:
	- [bugfix] Number of tab exceed length of |g:choosewin_tablabel| cause
	  error.
	- [bugfix] Experimental overlay caption break redo history.
	  now, keep undolist with |:rundo|, |:rundo|.
2014-01-03:
	- [improve] cleanup highlight management.
	- [new] add experimental overlay window caption.
2013-12-31:
	- [bugfixed] Number of tab exceed length of |g:choosewin_tablabel|
	  cause error.
	- [new-feature] last four char for |g:choosewin_tablabel|is used for
	  special tab excursion.
	- [bugfix] choosing tab and <Esc> don't revert original tab.
2013-12-29:
	- now blinking cursor word at land so that easy to spot cursor.
	- [api-change] add auto-choose optional args for choowsewin#start()
	  suggested by hrsh7th
2013-12-28: v0.8
	- now can choose tab inspired number of advice by manga-osyo
2013-12-28: v0.6
	- cleanup
	- now independent from &statusline plugin( such as ezbar )
2013-12-21: v0.1
	- initial release

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
