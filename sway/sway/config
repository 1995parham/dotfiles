# vim: ft=swayconfig
# sway config file

# Set mod key (Mod1=<Alt>, Mod4=<Super>)
set $mod Mod4

# set default desktop layout (default is tiling)
# workspace_layout tabbed <stacking|tabbed>

# Configure border style <normal|none|pixel n>
default_border pixel 2
default_floating_border normal

# Hide borders
hide_edge_borders none

# change borders
bindsym $mod+u border none
bindsym $mod+y border pixel 1
bindsym $mod+n border normal

# Use Mouse+$mod to drag floating windows
floating_modifier $mod

# start a terminal
# bindsym $mod+Return exec foot
bindsym $mod+Return exec alacritty

# termpad is a special application class which is floating and used for terminals.
for_window [app_id="__termpad"] floating enable

# floating terminal in the middle of screen
bindsym $mod+Shift+Return exec foot --app-id="__termpad"

# sway configuration at you glance to review and findout the key binding
bindsym $mod+F1 exec foot --app-id="__termpad" "bat" "$HOME/.config/sway/config"

# kill focused window
bindsym $mod+Shift+q kill

# start program launcher with fuzzel
bindsym $mod+d exec --no-startup-id fuzzel -b ffc04da0 -t 000000ff -D no

# pulseaudio mixer
bindsym $mod+Ctrl+m exec pavucontrol

# mpd client in the moddle of screen
bindsym $mod+F5 exec foot --app-id="__termpad" 'ncmpcpp'

# dunst notification
bindsym $mod+Shift+d --release exec "killall dunst; exec notify-send 'restart dunst'"

# hide mouse cursor after a period of inactivity
seat seat0 hide_cursor 3000

# screenshot with grim
# https://github.com/emersion/grim
bindsym Print exec --no-startup-id grim

# screenshot with flameshot
bindsym $mod+Print exec --no-startup-id ( flameshot &; ) && ( sleep 0.5s && flameshot gui )

# idle configuration for when system is being idle
exec swayidle -w \
          timeout 300 'brightnessctl -s s 2% && swaylock -f' \
            resume 'brightnessctl -r' \
          timeout 600 'swaymsg "output * dpms off"' \
            resume 'swaymsg "output * dpms on" && brightnessctl -r' \
          before-sleep 'swaylock -f'
# this will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. it will also lock your screen before your computer goes to sleep.

# brightness and volume buttons of keyboard
bindsym XF86AudioRaiseVolume exec pactl set-sink-volume @DEFAULT_SINK@ +5%
bindsym XF86AudioLowerVolume exec pactl set-sink-volume @DEFAULT_SINK@ -5%
bindsym XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle
bindsym XF86AudioMicMute exec pactl set-source-mute @DEFAULT_SOURCE@ toggle
bindsym XF86MonBrightnessDown exec brightnessctl set 5%-
bindsym XF86MonBrightnessUp exec brightnessctl set +5%

# change window focus only by keyboards
focus_follows_mouse no

# music buttons of keyboard
bindsym XF86AudioPlay exec notify-send "$(mpc toggle | head -2)"
bindsym XF86AudioPause exec notify-send "$(mpc toggle | head -2)"
bindsym XF86AudioNext exec notify-send  "$(mpc next | head -2)"
bindsym XF86AudioPrev exec notify-send "$(mpc prev | head -2)"

# disable touchpad button of keyboard
bindsym XF86TouchpadToggle exec "swaymsg input type:touchpad events toggle enabled disabled"

# change focus with vim-like keybinding
bindsym $mod+j focus left
bindsym $mod+k focus down
bindsym $mod+l focus up
bindsym $mod+semicolon focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+j move left
bindsym $mod+Shift+k move down
bindsym $mod+Shift+l move up
bindsym $mod+Shift+semicolon move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# workspace back and forth (with/without active container)
workspace_auto_back_and_forth yes
bindsym $mod+b workspace back_and_forth
bindsym $mod+Shift+b move container to workspace back_and_forth; workspace back_and_forth

# split orientation
bindsym $mod+h split h
bindsym $mod+v split v
bindsym $mod+q split toggle

# toggle fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+Ctrl+space focus mode_toggle

# toggle sticky for the active window
bindsym $mod+Shift+s sticky toggle

# focus the parent container
bindsym $mod+a focus parent

# move the currently focused window to the scratchpad
bindsym $mod+Shift+minus move scratchpad

# Show the next scratchpad window or hide the focused scratchpad window.
# If there are multiple scratchpad windows, this command cycles through them.
bindsym $mod+minus scratchpad show

# navigate workspaces next / previous
bindsym $mod+Ctrl+Right workspace next
bindsym $mod+Ctrl+Left workspace prev
bindsym --whole-window button9 workspace next
bindsym --whole-window button8 workspace prev

# hide/show waybar
bindsym $mod+m bar mode invisible
bindsym $mod+Shift+m bar mode dock

# set window title
for_window [title=".*"] title_format "%title (%app_id,%class)"

# Workspace names
# to display names or symbols instead of plain workspace numbers you can use
# something like: set $ws1 1:mail
#                 set $ws2 2:ï‚¬
set $ws1 1:main-1
set $ws2 2:main-2
set $ws3 3:emacs
set $ws4 4:www
set $ws5 5:vm
set $ws6 6:apps-1
set $ws7 7:apps-2
set $ws8 8:social
set $ws9 9:chrome

# switch to workspace
bindsym --to-code {
  $mod+1 workspace $ws1
  $mod+2 workspace $ws2
  $mod+3 workspace $ws3
  $mod+4 workspace $ws4
  $mod+5 workspace $ws5
  $mod+6 workspace $ws6
  $mod+7 workspace $ws7
  $mod+8 workspace $ws8
  $mod+9 workspace $ws9
}

# Move focused container to workspace
bindsym $mod+Ctrl+1 move container to workspace $ws1
bindsym $mod+Ctrl+2 move container to workspace $ws2
bindsym $mod+Ctrl+3 move container to workspace $ws3
bindsym $mod+Ctrl+4 move container to workspace $ws4
bindsym $mod+Ctrl+5 move container to workspace $ws5
bindsym $mod+Ctrl+6 move container to workspace $ws6
bindsym $mod+Ctrl+7 move container to workspace $ws7
bindsym $mod+Ctrl+8 move container to workspace $ws8
bindsym $mod+Ctrl+9 move container to workspace $ws9

# Move to workspace with focused container
bindsym $mod+Shift+1 move container to workspace $ws1; workspace $ws1
bindsym $mod+Shift+2 move container to workspace $ws2; workspace $ws2
bindsym $mod+Shift+3 move container to workspace $ws3; workspace $ws3
bindsym $mod+Shift+4 move container to workspace $ws4; workspace $ws4
bindsym $mod+Shift+5 move container to workspace $ws5; workspace $ws5
bindsym $mod+Shift+6 move container to workspace $ws6; workspace $ws6
bindsym $mod+Shift+7 move container to workspace $ws7; workspace $ws7
bindsym $mod+Shift+8 move container to workspace $ws8; workspace $ws8
bindsym $mod+Shift+9 move container to workspace $ws9; workspace $ws9

# switch to workspace with urgent window automatically
# for_window [urgent=latest] focus

# turn-off display on lid close
# bindswitch lid:on output * dpms off
# bindswitch lid:off output * dpms on

bindgesture swipe:right workspace prev
bindgesture swipe:left workspace next

# reload the configuration file
bindsym $mod+Shift+r reload; exec "notify-send reloaded"

# Theme colors
# class                 border  backgr. text    indic.   child_border
client.focused          #333333 #ffa500 #333333 #FDF6E3
client.focused_inactive #333333 #333333 #ffa500 #454948
client.unfocused        #333333 #333333 #ffa500 #454948
client.urgent           #333333 #333333 #b30000 #268BD2
# Background and text color are used to draw placeholder window contents (when restoring layouts). Border and indicator are ignored.
client.placeholder      #000000 #0c0c0c #ffffff #000000

client.background       #333333

bar {
  swaybar_command waybar
}

include ~/.config/sway/config.d/*
include ~/.config/sway/hosts/`hostname`.conf
include /etc/sway/config.d/*
