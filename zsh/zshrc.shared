#!/bin/zsh
# source bash profiles

test -f /etc/profile && emulate sh -c 'source /etc/profile'
test -f "$HOME/.profile" && emulate sh -c 'source $HOME/.profile'

# path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

[ -d $ZSH ] || git clone https://github.com/ohmyzsh/ohmyzsh $ZSH

# if you come from bash you might have to change your $PATH.
path=('/usr/local/bin' $path)

# load starship command prompt if it is available
# and use zsh theme as fallback.
if [ "$(command -v starship)" ]; then
  eval "$(starship init zsh)"
else
  # set name of the theme to load. Optionally, if you set this to "random"
  # it'll load a random theme each time that oh-my-zsh is loaded.
  # see https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
  ZSH_THEME="1995parham"
fi

# set list of themes to load
# setting this variable when ZSH_THEME=random
# cause zsh load theme from this variable instead of
# looking in ~/.oh-my-zsh/themes/
# An empty array have no effect
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# would you like to use another custom folder than $ZSH/custom?
ZSH_CUSTOM=~/.zsh.plug

# which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# example format: plugins=(rails git textmate ruby lighthouse)
# add wisely, as too many plugins slow down shell startup.
plugins=(
	vi-mode
	golang
	rust
	# oc helm kubectl
	gnu-utils

	proxy
)

source $ZSH/oh-my-zsh.sh

# dircolors

if [ -f "$HOME/.dircolors" ]; then
  if [ "$(command -v dircolors)" ]; then
	  eval $(dircolors "$HOME/.dircolors")
  elif [ "$(command -v gdircolors)" ]; then
    eval $(gdircolors "$HOME/.dircolors")
  fi
fi

# def for definition of a word
# use a wrapper around sdcv to conveniently format its output
# on osx it uses the prebuild mac dictionary.

function def() {
	if [[ "$OSTYPE" == "darwin"* ]]; then
		curl dict://dict.org/d:$1
	else
		sdcv -n --utf8-output --color "$@" 2>&1 |
			fold --width=$(tput cols) |
			less -FRX
	fi
}

# set personal aliases
# for a full list of active aliases, run `alias`.

alias grep="grep --color=auto"
alias vi="vim"
alias r="source ~/.zshenv && source ~/.zshrc"
alias emacs="emacs -nw"

# set up navi

_navi_call() {
   local result="$(navi "$@" </dev/tty)"
   printf "%s" "$result"
}

_navi_widget() {
   local -r input="${LBUFFER}"
   local -r last_command="$(echo "${input}" | navi fn widget::last_command)"
   local replacement="$last_command"

   if [ -z "$last_command" ]; then
      replacement="$(_navi_call --print)"
   elif [ "$LASTWIDGET" = "_navi_widget" ] && [ "$input" = "$previous_output" ]; then
      replacement="$(_navi_call --print --query "$last_command")"
   else
      replacement="$(_navi_call --print --best-match --query "$last_command")"
   fi

   if [ -n "$replacement" ]; then
      local -r find="${last_command}_NAVIEND"
      previous_output="${input}_NAVIEND"
      previous_output="${previous_output//$find/$replacement}"
   else
      previous_output="$input"
   fi

   zle kill-whole-line
   LBUFFER="${previous_output}"
   region_highlight=("P0 100 bold")
   zle redisplay
}

zle -N _navi_widget
bindkey '^h' _navi_widget

# change kubernetes context/namespace with ease

_call_kubectx() {
  kubectx </dev/tty
}

zle -N _call_kubectx

bindkey '^t' _call_kubectx

# history

autoload -U history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end

# search history with text already entered at the prompt in zsh
bindkey "^[OA" history-beginning-search-backward-end
bindkey "^[OB" history-beginning-search-forward-end


# vim-mode

# edit command in vim
bindkey -M vicmd v edit-command-line

# man pages with batman

if [[ "$(command -v batman)" ]]; then
  alias man=batman
fi

# pyenv

if [[ "$(command -v pyenv)" ]]; then
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
fi

# using zsh in neovim terminal mode.
# neovim defines $NVIM in terminal mode and based on it
# we can use nvr.
if [ ! -z "$NVIM" ]; then
  alias nvim=nvr
  export EDITOR="nvr -cc split +'set bufhidden=delete' --remote-wait"

  excl_plugins=(vi-mode)

  plugins=${plugins:|excl_plugins}
fi

# git

# you cannot provide alias for git default command but I need to disable commit sub-coomand.
git(){
  if [[ "$1" == "commit" ]]; then
    echo "commit is not good for me"
    return 1
  fi
  =git "$@"
}

